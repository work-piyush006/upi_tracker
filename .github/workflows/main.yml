name: Build Expense Tracker APK

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Setup Flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.13.8"

      # 3. Disable Flutter Telemetry
      - name: Disable Flutter Telemetry
        run: flutter --disable-telemetry

      # 4. Force create Android folder every build
      - name: Force create Android folder
        run: |
          rm -rf android
          flutter create --org com.expensetracker.app --project-name expense_tracker --platforms android .

      # 5. Replace app/build.gradle with template (SDK versions + multidex)
      - name: Replace build.gradle template
        run: |
          cat > android/app/build.gradle <<'EOF'
          def localProperties = new Properties()
          def localPropertiesFile = rootProject.file('local.properties')
          if (localPropertiesFile.exists()) {
              localPropertiesFile.withReader('UTF-8') { reader ->
                  localProperties.load(reader)
              }
          }

          def flutterRoot = localProperties.getProperty('flutter.sdk')
          if (flutterRoot == null) {
              throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in local.properties.")
          }

          apply plugin: 'com.android.application'
          apply plugin: 'kotlin-android'
          apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

          android {
              namespace 'com.expensetracker.app'
              compileSdkVersion 34

              defaultConfig {
                  applicationId "com.expensetracker.app"
                  minSdkVersion 23
                  targetSdkVersion 34
                  versionCode 1
                  versionName "1.0"

                  multiDexEnabled true
                  testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
              }

              buildTypes {
                  release {
                      signingConfig signingConfigs.debug
                      minifyEnabled false
                      shrinkResources false
                      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                  }
              }

              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_1_8
                  targetCompatibility JavaVersion.VERSION_1_8
                  coreLibraryDesugaringEnabled true
              }

              kotlinOptions {
                  jvmTarget = '1.8'
              }
          }

          dependencies {
              implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
              implementation 'androidx.core:core-ktx:1.12.0'
              implementation 'androidx.appcompat:appcompat:1.7.0'
              implementation 'com.google.android.material:material:1.12.0'
              implementation 'androidx.constraintlayout:constraintlayout:2.2.0'
              implementation "androidx.multidex:multidex:2.0.1"

              coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.3'
          }

          apply plugin: 'com.google.gms.google-services'
          EOF

      # 6. Install dependencies
      - name: Flutter Pub Get
        run: flutter pub get

      # 7. Generate Hive adapters
      - name: Hive Build Runner
        run: flutter packages pub run build_runner build --delete-conflicting-outputs

      # 8. Configure AndroidManifest for notifications & listener
      - name: Configure Android Manifest
        run: |
          ANDROID_MANIFEST="android/app/src/main/AndroidManifest.xml"
          grep -q "POST_NOTIFICATIONS" $ANDROID_MANIFEST || \
          sed -i '/<manifest /a <uses-permission android:name="android.permission.POST_NOTIFICATIONS"/>' $ANDROID_MANIFEST
          grep -q "NotificationListener" $ANDROID_MANIFEST || \
          sed -i '/<application /a <service android:name="com.expensetracker.app.flutter_notification_listener.NotificationListenerService" android:label="Notification Listener Service" android:permission="android.permission.BIND_NOTIFICATION_LISTENER_SERVICE"><intent-filter><action android:name="android.service.notification.NotificationListenerService" /></intent-filter></service>' $ANDROID_MANIFEST

      # 9. Replace launcher icon using flutter_launcher_icons
      - name: Replace launcher icon
        run: flutter pub run flutter_launcher_icons

      # 10. Replace Flutter default icon manually with assets/logo.png
      - name: Replace Flutter default icon with custom logo
        run: |
          ICON_PATH="assets/logo.png"
          ANDROID_ICON_DIR="android/app/src/main/res"
          for density in mipmap-mdpi mipmap-hdpi mipmap-xhdpi mipmap-xxhdpi mipmap-xxxhdpi; do
            cp $ICON_PATH $ANDROID_ICON_DIR/$density/ic_launcher.png
          done
          echo "Custom logo replaced Flutter default icons."

      # 11. Build release APK
      - name: Build APK
        run: flutter build apk --release

      # 12. Upload APK as artifact
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: expense_tracker_apk
          path: build/app/outputs/flutter-apk/app-release.apk
